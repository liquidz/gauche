(define-module mi.http
  (use rfc.uri)
  (use rfc.http)
  (use rfc.base64)
  (use gauche.charconv)
  (export open-uri))
(select-module mi.http)

(define (make-args server request options)
  (let1 result (list server request)
    (if (null? options) result
      (let-keywords options ((user/pass ""))
        (if (string=? user/pass "")
          result
          (let1 enc-user/pass (base64-encode-string user/pass)
            (append result (list :Authorization #`"Basic ,enc-user/pass"))
            )
          )
        )
      )
    )
  )

(define (open-uri uri . options)
  (receive (scheme user-info hostname port path query frag) (uri-parse uri)
    (let ((server (if port #`",hostname:,port" #`",hostname"))
          (request (if query #`",path?,query" #`",path")))
      (receive (status header body)
        (apply http-get (make-args server request options))
        (values (ces-convert body "*JP") server request)
        )
      )
    )
  )

(provide "mi/http")
