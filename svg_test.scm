;(use mudalgorithm.hiragana)
(use srfi-1)
(use sxml.serializer)
(use sxml.sxpath)
(use sxml.tools)

(use gauche.interactive)

#|
(define-class <svg> ()
  ((sxml :init-value '())
   (width :init-keyword :width :init-value 100)
   (height :init-keyword :height :init-value 100)
   (version :init-keyword :version :init-value "1.0")
   (encoding :init-keyword :encoding :init-value "UTF-8")
   (svg-base)

   (base :init-value
         '(*TOP* (*PI* xml "version=\"1.0\" encoding=\"UTF-8\"")
                 (svg (@ (xmlns:svg "http://www.w3.org/2000/svg")
                         (xmlns "http://www.w3.org/2000/svg")
                         (xmlns:xlink "http://www.w3.org/1999/xlink")
                         (version "1.0") (xml:space "defualt")
                         (width "100") (height "100"))
                      )
                 )
         )
   )
  )
(define-method initialize ((self <svg>) initargs)
  (next-method)
  (let ((width (ref self 'width))
        (height (ref self 'height))
        (version (ref self 'version))
        (encoding (ref self 'encoding)))
    (set! (ref self 'svg-base) `(*TOP* (*PI* xml ,#`"version=\",|version|\" encoding=\",|encoding|\"")))
    (set! (ref self 'sxml)
      (append
        (ref self 'svg-base)
        `((svg (@ (xmlns:svg "http://www.w3.org/2000/svg")
                  (xmlns "http://www.w3.org/2000/svg")
                  (xmlns:xlink "http://www.w3.org/1999/xlink")
                  (version "1.0") (xml:space "defualt")
                  (width ,width) (height ,height))
               )
          ))
      )
    )
  )

(define svg:root '(svg))

(define-method get-svg ((obj <svg>))
  (srl:sxml->xml (ref obj 'sxml))
  )

(define-method svg:add-element! ((obj <svg>) element)
  (set! (ref obj 'sxml) (svg:add-element obj element))
  )

(define-method svg:add-element ((obj <svg>) element)
  (let1 sxml (ref obj 'sxml)
    (append (ref obj 'svg-base)
            (list (sxml:change-content
                    (ref ((sxpath svg:root) sxml) 0)
                    (list element)
                    )))
    )
  )
|#

(define-class <svg-args> ()
  ((x :init-keyword :x :init-value '())
   (y :init-keyword :y :init-value '())
   (x1 :init-keyword :x1 :init-value '())
   (x2 :init-keyword :x2 :init-value '())
   (y1 :init-keyword :y1 :init-value '())
   (y2 :init-keyword :y2 :init-value '())
   (width :init-keyword :width :init-value '())
   (height :init-keyword :height :init-value '())
   (cx :init-keyword :cx :init-value '())
   (cy :init-keyword :cy :init-value '())
   (r :init-keyword :r :init-value '())
   (rx :init-keyword :rx :init-value '())
   (ry :init-keyword :ry :init-value '())
   (fill :init-keyword :fill :init-value '())
   (stroke :init-keyword :stroke :init-value '())
   (stroke-width :init-keyword :stroke-width :init-value '())
   (points :init-keyword :points :init-value '())
   (font-size :init-keyword :font-size :init-value '())
   (font-family :init-keyword :font-family :init-value '())
   )
  )
(define-method write-object ((arg <svg-args>) port)
  (write
    (fold (lambda (x res)
            (let* ((key (ref x 0)) (value (ref arg key)))
              (if (null? value) res (append res `((,key ,value))))
              )
            ) '(@) (class-slots <svg-args>))
    port)
  )

(define-syntax svg:
  (syntax-rules ()
    [(svg: tag args ...)
     `(tag ,(make <svg-args> args ...))
     ]
    )
  )

(define (with-svg-canvas fn . args)
  (let-keywords args ((width 100) (height 100))
    (fn (make <svg> :width width :height height))
    )
  )

(define (main args)
  (print (svg: rect :x 10 :y 20 :width 50 :height 30))
  #;(with-svg-canvas
    (lambda (c)
      (print "\nadd-element = " (svg:add-element c '(rect hello)) "\n")

      (print "original = " (ref c 'sxml))
      ;(svg:rect! c :width 50 :height 50)
      ;(print (get-svg c))
      )
    :width 500
    :height 200
    )
  )
